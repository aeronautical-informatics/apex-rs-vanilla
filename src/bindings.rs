/* automatically generated by rust-bindgen 0.59.2 */

pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const FD_SETSIZE: u32 = 1024;
pub const TIMESPAN_MAX: u32 = 4294967295;
pub const MAX_NAME_LENGTH: u32 = 30;
pub const INFINITE_TIME_VALUE: i32 = -1;
pub const MIN_PRIORITY_VALUE: u32 = 1;
pub const MAX_PRIORITY_VALUE: u32 = 239;
pub const MAX_LOCK_LEVEL: u32 = 16;
pub const NULL_PROCESS_ID: u32 = 0;
pub const MAX_ERROR_MESSAGE_SIZE: u32 = 128;
pub const MAX_SEMAPHORE_VALUE: u32 = 32767;
pub const MIN_SEMAPHORE_VALUE: i32 = -32767;
pub type APEX_BYTE = u8;
pub type APEX_INTEGER = i32;
pub type APEX_UNSIGNED = u32;
pub type APEX_LONG_INTEGER = i64;
pub const RETURN_CODE_TYPE_NO_ERROR: RETURN_CODE_TYPE = 0;
pub const RETURN_CODE_TYPE_NO_ACTION: RETURN_CODE_TYPE = 1;
pub const RETURN_CODE_TYPE_NOT_AVAILABLE: RETURN_CODE_TYPE = 2;
pub const RETURN_CODE_TYPE_INVALID_PARAM: RETURN_CODE_TYPE = 3;
pub const RETURN_CODE_TYPE_INVALID_CONFIG: RETURN_CODE_TYPE = 4;
pub const RETURN_CODE_TYPE_INVALID_MODE: RETURN_CODE_TYPE = 5;
pub const RETURN_CODE_TYPE_TIMED_OUT: RETURN_CODE_TYPE = 6;
pub type RETURN_CODE_TYPE = cty::c_uint;
pub type NAME_TYPE = [cty::c_char; 30usize];
pub type SYSTEM_ADDRESS_TYPE = *mut cty::c_void;
pub type MESSAGE_ADDR_TYPE = *mut APEX_BYTE;
pub type MESSAGE_SIZE_TYPE = APEX_INTEGER;
pub type MESSAGE_RANGE_TYPE = APEX_INTEGER;
pub const PORT_DIRECTION_TYPE_SOURCE: PORT_DIRECTION_TYPE = 0;
pub const PORT_DIRECTION_TYPE_DESTINATION: PORT_DIRECTION_TYPE = 1;
pub type PORT_DIRECTION_TYPE = cty::c_uint;
pub const QUEUING_DISCIPLINE_TYPE_FIFO: QUEUING_DISCIPLINE_TYPE = 0;
pub const QUEUING_DISCIPLINE_TYPE_PRIORITY: QUEUING_DISCIPLINE_TYPE = 1;
pub type QUEUING_DISCIPLINE_TYPE = cty::c_uint;
pub type SYSTEM_TIME_TYPE = APEX_LONG_INTEGER;
pub const APEX_BOOLEAN_TYPE_FALSE: APEX_BOOLEAN_TYPE = 0;
pub const APEX_BOOLEAN_TYPE_TRUE: APEX_BOOLEAN_TYPE = 1;
pub type APEX_BOOLEAN_TYPE = cty::c_uint;
pub type PROCESS_NAME_TYPE = NAME_TYPE;
pub type PROCESS_ID_TYPE = APEX_INTEGER;
pub type LOCK_LEVEL_TYPE = APEX_INTEGER;
pub type STACK_SIZE_TYPE = APEX_UNSIGNED;
pub type WAITING_RANGE_TYPE = APEX_INTEGER;
pub type PRIORITY_TYPE = APEX_INTEGER;
pub const PROCESS_STATE_TYPE_DORMANT: PROCESS_STATE_TYPE = 0;
pub const PROCESS_STATE_TYPE_READY: PROCESS_STATE_TYPE = 1;
pub const PROCESS_STATE_TYPE_RUNNING: PROCESS_STATE_TYPE = 2;
pub const PROCESS_STATE_TYPE_WAITING: PROCESS_STATE_TYPE = 3;
pub type PROCESS_STATE_TYPE = cty::c_uint;
pub const DEADLINE_TYPE_SOFT: DEADLINE_TYPE = 0;
pub const DEADLINE_TYPE_HARD: DEADLINE_TYPE = 1;
pub type DEADLINE_TYPE = cty::c_uint;
#[repr(C)]
pub struct PROCESS_ATTRIBUTE_TYPE {
    pub PERIOD: SYSTEM_TIME_TYPE,
    pub TIME_CAPACITY: SYSTEM_TIME_TYPE,
    pub ENTRY_POINT: SYSTEM_ADDRESS_TYPE,
    pub STACK_SIZE: STACK_SIZE_TYPE,
    pub BASE_PRIORITY: PRIORITY_TYPE,
    pub DEADLINE: DEADLINE_TYPE,
    pub NAME: PROCESS_NAME_TYPE,
}
#[test]
fn bindgen_test_layout_PROCESS_ATTRIBUTE_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<PROCESS_ATTRIBUTE_TYPE>(),
        72usize,
        concat!("Size of: ", stringify!(PROCESS_ATTRIBUTE_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<PROCESS_ATTRIBUTE_TYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(PROCESS_ATTRIBUTE_TYPE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PROCESS_ATTRIBUTE_TYPE>())).PERIOD as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_ATTRIBUTE_TYPE),
            "::",
            stringify!(PERIOD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PROCESS_ATTRIBUTE_TYPE>())).TIME_CAPACITY as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_ATTRIBUTE_TYPE),
            "::",
            stringify!(TIME_CAPACITY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PROCESS_ATTRIBUTE_TYPE>())).ENTRY_POINT as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_ATTRIBUTE_TYPE),
            "::",
            stringify!(ENTRY_POINT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PROCESS_ATTRIBUTE_TYPE>())).STACK_SIZE as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_ATTRIBUTE_TYPE),
            "::",
            stringify!(STACK_SIZE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PROCESS_ATTRIBUTE_TYPE>())).BASE_PRIORITY as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_ATTRIBUTE_TYPE),
            "::",
            stringify!(BASE_PRIORITY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PROCESS_ATTRIBUTE_TYPE>())).DEADLINE as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_ATTRIBUTE_TYPE),
            "::",
            stringify!(DEADLINE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PROCESS_ATTRIBUTE_TYPE>())).NAME as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_ATTRIBUTE_TYPE),
            "::",
            stringify!(NAME)
        )
    );
}
#[repr(C)]
pub struct PROCESS_STATUS_TYPE {
    pub DEADLINE_TIME: SYSTEM_TIME_TYPE,
    pub CURRENT_PRIORITY: PRIORITY_TYPE,
    pub PROCESS_STATE: PROCESS_STATE_TYPE,
    pub ATTRIBUTES: PROCESS_ATTRIBUTE_TYPE,
}
#[test]
fn bindgen_test_layout_PROCESS_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<PROCESS_STATUS_TYPE>(),
        88usize,
        concat!("Size of: ", stringify!(PROCESS_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<PROCESS_STATUS_TYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(PROCESS_STATUS_TYPE))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PROCESS_STATUS_TYPE>())).DEADLINE_TIME as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_STATUS_TYPE),
            "::",
            stringify!(DEADLINE_TIME)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PROCESS_STATUS_TYPE>())).CURRENT_PRIORITY as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_STATUS_TYPE),
            "::",
            stringify!(CURRENT_PRIORITY)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PROCESS_STATUS_TYPE>())).PROCESS_STATE as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_STATUS_TYPE),
            "::",
            stringify!(PROCESS_STATE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PROCESS_STATUS_TYPE>())).ATTRIBUTES as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PROCESS_STATUS_TYPE),
            "::",
            stringify!(ATTRIBUTES)
        )
    );
}
extern "C" {
    pub fn GET_PROCESS_ID(
        PROCESS_NAME: *mut cty::c_char,
        PROCESS_ID: *mut PROCESS_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_PROCESS_STATUS(
        PROCESS_ID: PROCESS_ID_TYPE,
        PROCESS_STATUS: *mut PROCESS_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn CREATE_PROCESS(
        ATTRIBUTES: *mut PROCESS_ATTRIBUTE_TYPE,
        PROCESS_ID: *mut PROCESS_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn SET_PRIORITY(
        PROCESS_ID: PROCESS_ID_TYPE,
        PRIORITY: PRIORITY_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn SUSPEND_SELF(TIME_OUT: SYSTEM_TIME_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn SUSPEND(PROCESS_ID: PROCESS_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn RESUME(PROCESS_ID: PROCESS_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn STOP_SELF();
}
extern "C" {
    pub fn STOP(PROCESS_ID: PROCESS_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn START(PROCESS_ID: PROCESS_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn DELAYED_START(
        PROCESS_ID: PROCESS_ID_TYPE,
        DELAY_TIME: SYSTEM_TIME_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn LOCK_PREEMPTION(LOCK_LEVEL: *mut LOCK_LEVEL_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn UNLOCK_PREEMPTION(LOCK_LEVEL: *mut LOCK_LEVEL_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn GET_MY_ID(PROCESS_ID: *mut PROCESS_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
pub type BLACKBOARD_NAME_TYPE = NAME_TYPE;
pub type BLACKBOARD_ID_TYPE = APEX_UNSIGNED;
pub const EMPTY_INDICATOR_TYPE_EMPTY: EMPTY_INDICATOR_TYPE = 0;
pub const EMPTY_INDICATOR_TYPE_OCCUPIED: EMPTY_INDICATOR_TYPE = 1;
pub type EMPTY_INDICATOR_TYPE = cty::c_uint;
#[repr(C)]
pub struct BLACKBOARD_STATUS_TYPE {
    pub EMPTY_INDICATOR: EMPTY_INDICATOR_TYPE,
    pub MAX_MESSAGE_SIZE: MESSAGE_SIZE_TYPE,
    pub WAITING_PROCESSES: WAITING_RANGE_TYPE,
}
#[test]
fn bindgen_test_layout_BLACKBOARD_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<BLACKBOARD_STATUS_TYPE>(),
        12usize,
        concat!("Size of: ", stringify!(BLACKBOARD_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<BLACKBOARD_STATUS_TYPE>(),
        4usize,
        concat!("Alignment of ", stringify!(BLACKBOARD_STATUS_TYPE))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BLACKBOARD_STATUS_TYPE>())).EMPTY_INDICATOR as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BLACKBOARD_STATUS_TYPE),
            "::",
            stringify!(EMPTY_INDICATOR)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BLACKBOARD_STATUS_TYPE>())).MAX_MESSAGE_SIZE as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BLACKBOARD_STATUS_TYPE),
            "::",
            stringify!(MAX_MESSAGE_SIZE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BLACKBOARD_STATUS_TYPE>())).WAITING_PROCESSES as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BLACKBOARD_STATUS_TYPE),
            "::",
            stringify!(WAITING_PROCESSES)
        )
    );
}
extern "C" {
    pub fn CREATE_BLACKBOARD(
        BLACKBOARD_NAME: *mut cty::c_char,
        MAX_MESSAGE_SIZE: MESSAGE_SIZE_TYPE,
        BLACKBOARD_ID: *mut BLACKBOARD_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn DISPLAY_BLACKBOARD(
        BLACKBOARD_ID: BLACKBOARD_ID_TYPE,
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: MESSAGE_SIZE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn READ_BLACKBOARD(
        BLACKBOARD_ID: BLACKBOARD_ID_TYPE,
        TIME_OUT: SYSTEM_TIME_TYPE,
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: *mut MESSAGE_SIZE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn CLEAR_BLACKBOARD(BLACKBOARD_ID: BLACKBOARD_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn GET_BLACKBOARD_ID(
        BLACKBOARD_NAME: *mut cty::c_char,
        BLACKBOARD_ID: *mut BLACKBOARD_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_BLACKBOARD_STATUS(
        BLACKBOARD_ID: BLACKBOARD_ID_TYPE,
        BLACKBOARD_STATUS: *mut BLACKBOARD_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type BUFFER_NAME_TYPE = NAME_TYPE;
pub type BUFFER_ID_TYPE = APEX_UNSIGNED;
#[repr(C)]
pub struct BUFFER_STATUS_TYPE {
    pub NB_MESSAGE: MESSAGE_RANGE_TYPE,
    pub MAX_NB_MESSAGE: MESSAGE_RANGE_TYPE,
    pub MAX_MESSAGE_SIZE: MESSAGE_SIZE_TYPE,
    pub WAITING_PROCESSES: WAITING_RANGE_TYPE,
}
#[test]
fn bindgen_test_layout_BUFFER_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<BUFFER_STATUS_TYPE>(),
        16usize,
        concat!("Size of: ", stringify!(BUFFER_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<BUFFER_STATUS_TYPE>(),
        4usize,
        concat!("Alignment of ", stringify!(BUFFER_STATUS_TYPE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<BUFFER_STATUS_TYPE>())).NB_MESSAGE as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BUFFER_STATUS_TYPE),
            "::",
            stringify!(NB_MESSAGE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BUFFER_STATUS_TYPE>())).MAX_NB_MESSAGE as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BUFFER_STATUS_TYPE),
            "::",
            stringify!(MAX_NB_MESSAGE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BUFFER_STATUS_TYPE>())).MAX_MESSAGE_SIZE as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BUFFER_STATUS_TYPE),
            "::",
            stringify!(MAX_MESSAGE_SIZE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<BUFFER_STATUS_TYPE>())).WAITING_PROCESSES as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BUFFER_STATUS_TYPE),
            "::",
            stringify!(WAITING_PROCESSES)
        )
    );
}
extern "C" {
    pub fn CREATE_BUFFER(
        BUFFER_NAME: *mut cty::c_char,
        MAX_MESSAGE_SIZE: MESSAGE_SIZE_TYPE,
        MAX_NB_MESSAGE: MESSAGE_RANGE_TYPE,
        QUEUING_DISCIPLINE: QUEUING_DISCIPLINE_TYPE,
        BUFFER_ID: *mut BUFFER_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn SEND_BUFFER(
        BUFFER_ID: BUFFER_ID_TYPE,
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: MESSAGE_SIZE_TYPE,
        TIME_OUT: SYSTEM_TIME_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn RECEIVE_BUFFER(
        BUFFER_ID: BUFFER_ID_TYPE,
        TIME_OUT: SYSTEM_TIME_TYPE,
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: *mut MESSAGE_SIZE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_BUFFER_ID(
        BUFFER_NAME: *mut cty::c_char,
        BUFFER_ID: *mut BUFFER_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_BUFFER_STATUS(
        BUFFER_ID: BUFFER_ID_TYPE,
        BUFFER_STATUS: *mut BUFFER_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type ERROR_MESSAGE_SIZE_TYPE = APEX_INTEGER;
pub type ERROR_MESSAGE_TYPE = [APEX_BYTE; 128usize];
pub const ERROR_CODE_TYPE_DEADLINE_MISSED: ERROR_CODE_TYPE = 0;
pub const ERROR_CODE_TYPE_APPLICATION_ERROR: ERROR_CODE_TYPE = 1;
pub const ERROR_CODE_TYPE_NUMERIC_ERROR: ERROR_CODE_TYPE = 2;
pub const ERROR_CODE_TYPE_ILLEGAL_REQUEST: ERROR_CODE_TYPE = 3;
pub const ERROR_CODE_TYPE_STACK_OVERFLOW: ERROR_CODE_TYPE = 4;
pub const ERROR_CODE_TYPE_MEMORY_VIOLATION: ERROR_CODE_TYPE = 5;
pub const ERROR_CODE_TYPE_HARDWARE_FAULT: ERROR_CODE_TYPE = 6;
pub const ERROR_CODE_TYPE_POWER_FAIL: ERROR_CODE_TYPE = 7;
pub const ERROR_CODE_TYPE_INTERNAL_ERROR: ERROR_CODE_TYPE = 8;
pub type ERROR_CODE_TYPE = cty::c_uint;
#[repr(C)]
pub struct ERROR_STATUS_TYPE {
    pub ERROR_CODE: ERROR_CODE_TYPE,
    pub LENGTH: ERROR_MESSAGE_SIZE_TYPE,
    pub FAILED_PROCESS_ID: PROCESS_ID_TYPE,
    pub FAILED_ADDRESS: SYSTEM_ADDRESS_TYPE,
    pub MESSAGE: ERROR_MESSAGE_TYPE,
}
#[test]
fn bindgen_test_layout_ERROR_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<ERROR_STATUS_TYPE>(),
        152usize,
        concat!("Size of: ", stringify!(ERROR_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<ERROR_STATUS_TYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(ERROR_STATUS_TYPE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ERROR_STATUS_TYPE>())).ERROR_CODE as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ERROR_STATUS_TYPE),
            "::",
            stringify!(ERROR_CODE)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ERROR_STATUS_TYPE>())).LENGTH as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ERROR_STATUS_TYPE),
            "::",
            stringify!(LENGTH)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<ERROR_STATUS_TYPE>())).FAILED_PROCESS_ID as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ERROR_STATUS_TYPE),
            "::",
            stringify!(FAILED_PROCESS_ID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<ERROR_STATUS_TYPE>())).FAILED_ADDRESS as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ERROR_STATUS_TYPE),
            "::",
            stringify!(FAILED_ADDRESS)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ERROR_STATUS_TYPE>())).MESSAGE as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ERROR_STATUS_TYPE),
            "::",
            stringify!(MESSAGE)
        )
    );
}
extern "C" {
    pub fn REPORT_APPLICATION_MESSAGE(
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: MESSAGE_SIZE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn CREATE_ERROR_HANDLER(
        ENTRY_POINT: SYSTEM_ADDRESS_TYPE,
        STACK_SIZE: STACK_SIZE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_ERROR_STATUS(
        ERROR_STATUS: *mut ERROR_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn RAISE_APPLICATION_ERROR(
        ERROR_CODE: ERROR_CODE_TYPE,
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: ERROR_MESSAGE_SIZE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type EVENT_NAME_TYPE = NAME_TYPE;
pub type EVENT_ID_TYPE = APEX_UNSIGNED;
pub const EVENT_STATE_TYPE_DOWN: EVENT_STATE_TYPE = 0;
pub const EVENT_STATE_TYPE_UP: EVENT_STATE_TYPE = 1;
pub type EVENT_STATE_TYPE = cty::c_uint;
#[repr(C)]
pub struct EVENT_STATUS_TYPE {
    pub EVENT_STATE: EVENT_STATE_TYPE,
    pub WAITING_PROCESSES: WAITING_RANGE_TYPE,
}
#[test]
fn bindgen_test_layout_EVENT_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<EVENT_STATUS_TYPE>(),
        8usize,
        concat!("Size of: ", stringify!(EVENT_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<EVENT_STATUS_TYPE>(),
        4usize,
        concat!("Alignment of ", stringify!(EVENT_STATUS_TYPE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<EVENT_STATUS_TYPE>())).EVENT_STATE as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EVENT_STATUS_TYPE),
            "::",
            stringify!(EVENT_STATE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<EVENT_STATUS_TYPE>())).WAITING_PROCESSES as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EVENT_STATUS_TYPE),
            "::",
            stringify!(WAITING_PROCESSES)
        )
    );
}
extern "C" {
    pub fn CREATE_EVENT(
        EVENT_NAME: *mut cty::c_char,
        EVENT_ID: *mut EVENT_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn SET_EVENT(EVENT_ID: EVENT_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn RESET_EVENT(EVENT_ID: EVENT_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn WAIT_EVENT(
        EVENT_ID: EVENT_ID_TYPE,
        TIME_OUT: SYSTEM_TIME_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_EVENT_ID(
        EVENT_NAME: *mut cty::c_char,
        EVENT_ID: *mut EVENT_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_EVENT_STATUS(
        EVENT_ID: EVENT_ID_TYPE,
        EVENT_STATUS: *mut EVENT_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type IRQ_ID_TYPE = APEX_INTEGER;
pub type IRQ_EVENT_NAME_TYPE = NAME_TYPE;
pub type IRQ_EVENT_ID_TYPE = APEX_UNSIGNED;
pub use self::EVENT_STATE_TYPE as IRQ_EVENT_STATE_TYPE;
#[repr(C)]
pub struct IRQ_EVENT_STATUS_TYPE {
    pub IRQ_EVENT_STATE: IRQ_EVENT_STATE_TYPE,
    pub WAITING_PROCESSES: WAITING_RANGE_TYPE,
    pub IRQ_PENDING: APEX_BOOLEAN_TYPE,
    pub IRQ_ID: IRQ_ID_TYPE,
}
#[test]
fn bindgen_test_layout_IRQ_EVENT_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<IRQ_EVENT_STATUS_TYPE>(),
        16usize,
        concat!("Size of: ", stringify!(IRQ_EVENT_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<IRQ_EVENT_STATUS_TYPE>(),
        4usize,
        concat!("Alignment of ", stringify!(IRQ_EVENT_STATUS_TYPE))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<IRQ_EVENT_STATUS_TYPE>())).IRQ_EVENT_STATE as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IRQ_EVENT_STATUS_TYPE),
            "::",
            stringify!(IRQ_EVENT_STATE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<IRQ_EVENT_STATUS_TYPE>())).WAITING_PROCESSES as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IRQ_EVENT_STATUS_TYPE),
            "::",
            stringify!(WAITING_PROCESSES)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<IRQ_EVENT_STATUS_TYPE>())).IRQ_PENDING as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IRQ_EVENT_STATUS_TYPE),
            "::",
            stringify!(IRQ_PENDING)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<IRQ_EVENT_STATUS_TYPE>())).IRQ_ID as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(IRQ_EVENT_STATUS_TYPE),
            "::",
            stringify!(IRQ_ID)
        )
    );
}
extern "C" {
    pub fn CREATE_IRQ_EVENT_NP(
        IRQ_EVENT_NAME: *mut cty::c_char,
        IRQ_ID: IRQ_ID_TYPE,
        IRQ_EVENT_ID: *mut IRQ_EVENT_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn RESET_IRQ_EVENT_NP(IRQ_EVENT_ID: IRQ_EVENT_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn WAIT_IRQ_EVENT_NP(
        IRQ_EVENT_ID: IRQ_EVENT_ID_TYPE,
        TIME_OUT: SYSTEM_TIME_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_IRQ_EVENT_ID_NP(
        IRQ_EVENT_NAME: *mut cty::c_char,
        IRQ_EVENT_ID: *mut IRQ_EVENT_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_IRQ_EVENT_STATUS_NP(
        IRQ_EVENT_ID: IRQ_EVENT_ID_TYPE,
        IRQ_EVENT_STATUS: *mut IRQ_EVENT_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type SCHEDULE_ID_TYPE = APEX_INTEGER;
pub type SCHEDULE_NAME_TYPE = NAME_TYPE;
#[repr(C)]
pub struct SCHEDULE_STATUS_TYPE {
    pub TIME_OF_LAST_SCHEDULE_SWITCH: SYSTEM_TIME_TYPE,
    pub CURRENT_SCHEDULE: SCHEDULE_ID_TYPE,
    pub NEXT_SCHEDULE: SCHEDULE_ID_TYPE,
}
#[test]
fn bindgen_test_layout_SCHEDULE_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<SCHEDULE_STATUS_TYPE>(),
        16usize,
        concat!("Size of: ", stringify!(SCHEDULE_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<SCHEDULE_STATUS_TYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(SCHEDULE_STATUS_TYPE))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SCHEDULE_STATUS_TYPE>())).TIME_OF_LAST_SCHEDULE_SWITCH
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SCHEDULE_STATUS_TYPE),
            "::",
            stringify!(TIME_OF_LAST_SCHEDULE_SWITCH)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SCHEDULE_STATUS_TYPE>())).CURRENT_SCHEDULE as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SCHEDULE_STATUS_TYPE),
            "::",
            stringify!(CURRENT_SCHEDULE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SCHEDULE_STATUS_TYPE>())).NEXT_SCHEDULE as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SCHEDULE_STATUS_TYPE),
            "::",
            stringify!(NEXT_SCHEDULE)
        )
    );
}
extern "C" {
    pub fn SET_MODULE_SCHEDULE(SCHEDULE_ID: SCHEDULE_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn GET_MODULE_SCHEDULE_STATUS(
        SCHEDULE_STATUS: *mut SCHEDULE_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_MODULE_SCHEDULE_ID(
        SCHEDULE_NAME: *mut cty::c_char,
        SCHEDULE_ID: *mut SCHEDULE_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub const OPERATING_MODE_TYPE_IDLE: OPERATING_MODE_TYPE = 0;
pub const OPERATING_MODE_TYPE_COLD_START: OPERATING_MODE_TYPE = 1;
pub const OPERATING_MODE_TYPE_WARM_START: OPERATING_MODE_TYPE = 2;
pub const OPERATING_MODE_TYPE_NORMAL: OPERATING_MODE_TYPE = 3;
pub type OPERATING_MODE_TYPE = cty::c_uint;
pub type PARTITION_ID_TYPE = APEX_UNSIGNED;
pub const START_CONDITION_TYPE_NORMAL_START: START_CONDITION_TYPE = 0;
pub const START_CONDITION_TYPE_PARTITION_RESTART: START_CONDITION_TYPE = 1;
pub const START_CONDITION_TYPE_HM_MODULE_RESTART: START_CONDITION_TYPE = 2;
pub const START_CONDITION_TYPE_HM_PARTITION_RESTART: START_CONDITION_TYPE = 3;
pub type START_CONDITION_TYPE = cty::c_uint;
#[repr(C)]
pub struct PARTITION_STATUS_TYPE {
    pub PERIOD: SYSTEM_TIME_TYPE,
    pub DURATION: SYSTEM_TIME_TYPE,
    pub IDENTIFIER: PARTITION_ID_TYPE,
    pub LOCK_LEVEL: LOCK_LEVEL_TYPE,
    pub OPERATING_MODE: OPERATING_MODE_TYPE,
    pub START_CONDITION: START_CONDITION_TYPE,
}
#[test]
fn bindgen_test_layout_PARTITION_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<PARTITION_STATUS_TYPE>(),
        32usize,
        concat!("Size of: ", stringify!(PARTITION_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<PARTITION_STATUS_TYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(PARTITION_STATUS_TYPE))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PARTITION_STATUS_TYPE>())).PERIOD as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PARTITION_STATUS_TYPE),
            "::",
            stringify!(PERIOD)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<PARTITION_STATUS_TYPE>())).DURATION as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PARTITION_STATUS_TYPE),
            "::",
            stringify!(DURATION)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PARTITION_STATUS_TYPE>())).IDENTIFIER as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PARTITION_STATUS_TYPE),
            "::",
            stringify!(IDENTIFIER)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PARTITION_STATUS_TYPE>())).LOCK_LEVEL as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PARTITION_STATUS_TYPE),
            "::",
            stringify!(LOCK_LEVEL)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PARTITION_STATUS_TYPE>())).OPERATING_MODE as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PARTITION_STATUS_TYPE),
            "::",
            stringify!(OPERATING_MODE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<PARTITION_STATUS_TYPE>())).START_CONDITION as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PARTITION_STATUS_TYPE),
            "::",
            stringify!(START_CONDITION)
        )
    );
}
extern "C" {
    pub fn GET_PARTITION_STATUS(
        PARTITION_STATUS: *mut PARTITION_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn SET_PARTITION_MODE(
        OPERATING_MODE: OPERATING_MODE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type PARTITION_NAME_TYPE = NAME_TYPE;
extern "C" {
    pub fn GET_PARTITION_ID_NP(
        PARTITION_NAME: *mut cty::c_char,
        PARTITION_ID: *mut PARTITION_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_PARTITION_STATUS_NP(
        PARTITION_ID: PARTITION_ID_TYPE,
        PARTITION_STATUS: *mut PARTITION_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn SET_PARTITION_MODE_NP(
        PARTITION_ID: PARTITION_ID_TYPE,
        OPERATING_MODE: OPERATING_MODE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type QUEUING_PORT_NAME_TYPE = NAME_TYPE;
pub type QUEUING_PORT_ID_TYPE = APEX_UNSIGNED;
#[repr(C)]
pub struct QUEUING_PORT_STATUS_TYPE {
    pub NB_MESSAGE: MESSAGE_RANGE_TYPE,
    pub MAX_NB_MESSAGE: MESSAGE_RANGE_TYPE,
    pub MAX_MESSAGE_SIZE: MESSAGE_SIZE_TYPE,
    pub PORT_DIRECTION: PORT_DIRECTION_TYPE,
    pub WAITING_PROCESSES: WAITING_RANGE_TYPE,
}
#[test]
fn bindgen_test_layout_QUEUING_PORT_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<QUEUING_PORT_STATUS_TYPE>(),
        20usize,
        concat!("Size of: ", stringify!(QUEUING_PORT_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<QUEUING_PORT_STATUS_TYPE>(),
        4usize,
        concat!("Alignment of ", stringify!(QUEUING_PORT_STATUS_TYPE))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<QUEUING_PORT_STATUS_TYPE>())).NB_MESSAGE as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QUEUING_PORT_STATUS_TYPE),
            "::",
            stringify!(NB_MESSAGE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<QUEUING_PORT_STATUS_TYPE>())).MAX_NB_MESSAGE as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(QUEUING_PORT_STATUS_TYPE),
            "::",
            stringify!(MAX_NB_MESSAGE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<QUEUING_PORT_STATUS_TYPE>())).MAX_MESSAGE_SIZE as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QUEUING_PORT_STATUS_TYPE),
            "::",
            stringify!(MAX_MESSAGE_SIZE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<QUEUING_PORT_STATUS_TYPE>())).PORT_DIRECTION as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(QUEUING_PORT_STATUS_TYPE),
            "::",
            stringify!(PORT_DIRECTION)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<QUEUING_PORT_STATUS_TYPE>())).WAITING_PROCESSES as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QUEUING_PORT_STATUS_TYPE),
            "::",
            stringify!(WAITING_PROCESSES)
        )
    );
}
extern "C" {
    pub fn CREATE_QUEUING_PORT(
        QUEUING_PORT_NAME: *mut cty::c_char,
        MAX_MESSAGE_SIZE: MESSAGE_SIZE_TYPE,
        MAX_NB_MESSAGE: MESSAGE_RANGE_TYPE,
        PORT_DIRECTION: PORT_DIRECTION_TYPE,
        QUEUING_DISCIPLINE: QUEUING_DISCIPLINE_TYPE,
        QUEUING_PORT_ID: *mut QUEUING_PORT_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn SEND_QUEUING_MESSAGE(
        QUEUING_PORT_ID: QUEUING_PORT_ID_TYPE,
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: MESSAGE_SIZE_TYPE,
        TIME_OUT: SYSTEM_TIME_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn RECEIVE_QUEUING_MESSAGE(
        QUEUING_PORT_ID: QUEUING_PORT_ID_TYPE,
        TIME_OUT: SYSTEM_TIME_TYPE,
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: *mut MESSAGE_SIZE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_QUEUING_PORT_ID(
        QUEUING_PORT_NAME: *mut cty::c_char,
        QUEUING_PORT_ID: *mut QUEUING_PORT_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_QUEUING_PORT_STATUS(
        QUEUING_PORT_ID: QUEUING_PORT_ID_TYPE,
        QUEUING_PORT_STATUS: *mut QUEUING_PORT_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn CLEAR_QUEUING_PORT(
        QUEUING_PORT_ID: QUEUING_PORT_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type SAMPLING_PORT_NAME_TYPE = NAME_TYPE;
pub type SAMPLING_PORT_ID_TYPE = APEX_UNSIGNED;
pub const VALIDITY_TYPE_INVALID: VALIDITY_TYPE = 0;
pub const VALIDITY_TYPE_VALID: VALIDITY_TYPE = 1;
pub type VALIDITY_TYPE = cty::c_uint;
#[repr(C)]
pub struct SAMPLING_PORT_STATUS_TYPE {
    pub REFRESH_PERIOD: SYSTEM_TIME_TYPE,
    pub MAX_MESSAGE_SIZE: MESSAGE_SIZE_TYPE,
    pub PORT_DIRECTION: PORT_DIRECTION_TYPE,
    pub LAST_MSG_VALIDITY: VALIDITY_TYPE,
}
#[test]
fn bindgen_test_layout_SAMPLING_PORT_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<SAMPLING_PORT_STATUS_TYPE>(),
        24usize,
        concat!("Size of: ", stringify!(SAMPLING_PORT_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<SAMPLING_PORT_STATUS_TYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(SAMPLING_PORT_STATUS_TYPE))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SAMPLING_PORT_STATUS_TYPE>())).REFRESH_PERIOD as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SAMPLING_PORT_STATUS_TYPE),
            "::",
            stringify!(REFRESH_PERIOD)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SAMPLING_PORT_STATUS_TYPE>())).MAX_MESSAGE_SIZE as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SAMPLING_PORT_STATUS_TYPE),
            "::",
            stringify!(MAX_MESSAGE_SIZE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SAMPLING_PORT_STATUS_TYPE>())).PORT_DIRECTION as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SAMPLING_PORT_STATUS_TYPE),
            "::",
            stringify!(PORT_DIRECTION)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SAMPLING_PORT_STATUS_TYPE>())).LAST_MSG_VALIDITY as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SAMPLING_PORT_STATUS_TYPE),
            "::",
            stringify!(LAST_MSG_VALIDITY)
        )
    );
}
extern "C" {
    pub fn CREATE_SAMPLING_PORT(
        SAMPLING_PORT_NAME: *mut cty::c_char,
        MAX_MESSAGE_SIZE: MESSAGE_SIZE_TYPE,
        PORT_DIRECTION: PORT_DIRECTION_TYPE,
        REFRESH_PERIOD: SYSTEM_TIME_TYPE,
        SAMPLING_PORT_ID: *mut SAMPLING_PORT_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn WRITE_SAMPLING_MESSAGE(
        SAMPLING_PORT_ID: SAMPLING_PORT_ID_TYPE,
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: MESSAGE_SIZE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn READ_SAMPLING_MESSAGE(
        SAMPLING_PORT_ID: SAMPLING_PORT_ID_TYPE,
        MESSAGE_ADDR: MESSAGE_ADDR_TYPE,
        LENGTH: *mut MESSAGE_SIZE_TYPE,
        VALIDITY: *mut VALIDITY_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_SAMPLING_PORT_ID(
        SAMPLING_PORT_NAME: *mut cty::c_char,
        SAMPLING_PORT_ID: *mut SAMPLING_PORT_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_SAMPLING_PORT_STATUS(
        SAMPLING_PORT_ID: SAMPLING_PORT_ID_TYPE,
        SAMPLING_PORT_STATUS: *mut SAMPLING_PORT_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type SEMAPHORE_NAME_TYPE = NAME_TYPE;
pub type SEMAPHORE_ID_TYPE = APEX_UNSIGNED;
pub type SEMAPHORE_VALUE_TYPE = APEX_INTEGER;
#[repr(C)]
pub struct SEMAPHORE_STATUS_TYPE {
    pub CURRENT_VALUE: SEMAPHORE_VALUE_TYPE,
    pub MAXIMUM_VALUE: SEMAPHORE_VALUE_TYPE,
    pub WAITING_PROCESSES: WAITING_RANGE_TYPE,
}
#[test]
fn bindgen_test_layout_SEMAPHORE_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<SEMAPHORE_STATUS_TYPE>(),
        12usize,
        concat!("Size of: ", stringify!(SEMAPHORE_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<SEMAPHORE_STATUS_TYPE>(),
        4usize,
        concat!("Alignment of ", stringify!(SEMAPHORE_STATUS_TYPE))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SEMAPHORE_STATUS_TYPE>())).CURRENT_VALUE as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SEMAPHORE_STATUS_TYPE),
            "::",
            stringify!(CURRENT_VALUE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SEMAPHORE_STATUS_TYPE>())).MAXIMUM_VALUE as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SEMAPHORE_STATUS_TYPE),
            "::",
            stringify!(MAXIMUM_VALUE)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SEMAPHORE_STATUS_TYPE>())).WAITING_PROCESSES as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SEMAPHORE_STATUS_TYPE),
            "::",
            stringify!(WAITING_PROCESSES)
        )
    );
}
extern "C" {
    pub fn CREATE_SEMAPHORE(
        SEMAPHORE_NAME: *mut cty::c_char,
        CURRENT_VALUE: SEMAPHORE_VALUE_TYPE,
        MAXIMUM_VALUE: SEMAPHORE_VALUE_TYPE,
        QUEUING_DISCIPLINE: QUEUING_DISCIPLINE_TYPE,
        SEMAPHORE_ID: *mut SEMAPHORE_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn WAIT_SEMAPHORE(
        SEMAPHORE_ID: SEMAPHORE_ID_TYPE,
        TIME_OUT: SYSTEM_TIME_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn SIGNAL_SEMAPHORE(SEMAPHORE_ID: SEMAPHORE_ID_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn GET_SEMAPHORE_ID(
        SEMAPHORE_NAME: *mut cty::c_char,
        SEMAPHORE_ID: *mut SEMAPHORE_ID_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn GET_SEMAPHORE_STATUS(
        SEMAPHORE_ID: SEMAPHORE_ID_TYPE,
        SEMAPHORE_STATUS: *mut SEMAPHORE_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
pub type SYSTEM_RESET_STATUS_TYPE = APEX_INTEGER;
pub type SYSTEM_COUNTER_TYPE = APEX_INTEGER;
pub const SYSTEM_OPERATING_MODE_TYPE_HPV_COLD_RESET: SYSTEM_OPERATING_MODE_TYPE = 0;
pub const SYSTEM_OPERATING_MODE_TYPE_HPV_WARM_RESET: SYSTEM_OPERATING_MODE_TYPE = 1;
pub const SYSTEM_OPERATING_MODE_TYPE_HPV_HALT: SYSTEM_OPERATING_MODE_TYPE = 2;
pub type SYSTEM_OPERATING_MODE_TYPE = cty::c_uint;
#[repr(C)]
pub struct SYSTEM_STATUS_TYPE {
    pub RESET_STATUS: SYSTEM_RESET_STATUS_TYPE,
    pub RESET_COUNTER: SYSTEM_COUNTER_TYPE,
    pub LAST_RESET: SYSTEM_OPERATING_MODE_TYPE,
}
#[test]
fn bindgen_test_layout_SYSTEM_STATUS_TYPE() {
    assert_eq!(
        ::core::mem::size_of::<SYSTEM_STATUS_TYPE>(),
        12usize,
        concat!("Size of: ", stringify!(SYSTEM_STATUS_TYPE))
    );
    assert_eq!(
        ::core::mem::align_of::<SYSTEM_STATUS_TYPE>(),
        4usize,
        concat!("Alignment of ", stringify!(SYSTEM_STATUS_TYPE))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SYSTEM_STATUS_TYPE>())).RESET_STATUS as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSTEM_STATUS_TYPE),
            "::",
            stringify!(RESET_STATUS)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<SYSTEM_STATUS_TYPE>())).RESET_COUNTER as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSTEM_STATUS_TYPE),
            "::",
            stringify!(RESET_COUNTER)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<SYSTEM_STATUS_TYPE>())).LAST_RESET as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SYSTEM_STATUS_TYPE),
            "::",
            stringify!(LAST_RESET)
        )
    );
}
extern "C" {
    pub fn GET_SYSTEM_STATUS_NP(
        SYSTEM_STATUS: *mut SYSTEM_STATUS_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn SET_SYSTEM_MODE_NP(
        SYSTEM_OPERATING_MODE: SYSTEM_OPERATING_MODE_TYPE,
        RETURN_CODE: *mut RETURN_CODE_TYPE,
    );
}
extern "C" {
    pub fn TIMED_WAIT(DELAY_TIME: SYSTEM_TIME_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn PERIODIC_WAIT(RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn GET_TIME(SYSTEM_TIME: *mut SYSTEM_TIME_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
extern "C" {
    pub fn REPLENISH(BUDGET_TIME: SYSTEM_TIME_TYPE, RETURN_CODE: *mut RETURN_CODE_TYPE);
}
